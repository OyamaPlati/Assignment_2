import java.util.Scanner;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.FileWriter;
import java.io.File;

public class DamBSTApp {
   
   private static BinarySearchTree <DamData> bst = new BinarySearchTree <DamData> ();
   private static Scanner inputStream = null;
   private static int searchCount = 0;
   
   public static void main (String[] args) {
      
      try {
		  inputStream = new Scanner(
		      new FileInputStream(
		      (new File("results.csv")).getAbsolutePath()));
      }
      catch (FileNotFoundException e) {
         e.printStackTrace();
         System.out.println("File does not exist");
         System.out.println(" or could not be open.");
      }
      
      String line = null;
      
      inputStream.nextLine(); 
      
      while (inputStream.hasNextLine()) {
         line = inputStream.nextLine();
         
         String[] rawdata = line.split(",");
         
         if (rawdata.length >= 26) {
            bst.insert(
               new DamData(rawdata[2], rawdata[10], rawdata[25]));
         }
         else if ((rawdata.length >= 11) 
            && (rawdata.length < 26)) {
            bst.insert(
               new DamData(rawdata[2], rawdata[10], null));
         }
         else if (rawdata.length < 11){
            bst.insert(new DamData(rawdata[2], null, null));
         }    
      }
      
      if (args.length != 0) {
         StringBuilder builder = new StringBuilder();
         for (String s: args) {
            if (builder.length() > 0) {
               builder.append(" ");
            }
            builder.append(s);
         }
         printDam(builder.toString().trim());
      }
      else {
         printAllDams();  
      }
      
      inputStream.close();  
   }
   
   public static void printAllDams () {
      bst.postOrder();
      printOpCount(searchCount, BinarySearchTree.insertCount);
   }
   
   public static void printDam (String damName) {
      BinaryNode <DamData> result = find (damName);
      if (result == null) {
    	  printOpCount(searchCount, BinarySearchTree.insertCount);
         System.out.println("Dam not found");
      }
      else {
         printOpCount(searchCount, BinarySearchTree.insertCount);
         System.out.println(result.element); 
      }  
   }
   
   private static BinaryNode<DamData> find (String name) {
      return find (bst.root, name);   
   }
   
   private static BinaryNode<DamData> find 
               (BinaryNode<DamData> t, String name) {
      BinaryNode<DamData> result = null;
      if (t != null) { 
         searchCount++;
         if (name.equals(t.element.getDamName().trim())) { 
            return t;
         }
         else {
            result = find (t.left, name); 
            if (result == null) {
               result = find (t.right, name);
            }
            return result;
         }
      }
      else {
         return null;
      }
   }
  private static void printOpCount (int searchcount, int insertcount) {
      PrintWriter outputStreamSearch = null;
      PrintWriter outputStreamInsert = null;
      
      try {
         outputStreamSearch = new PrintWriter (
                              new FileWriter("OpBSTSearchReport.dat", true));
         outputStreamInsert = new PrintWriter(
	 	 	      new FileWriter("OpBSTInsertReport.dat", true));
      }
      catch (FileNotFoundException e0) {
         e0.printStackTrace();
         System.out.println("File not found \n or file does not exist.");
         System.exit(0);
      }
      catch (IOException e1) {
         e1.printStackTrace();
         System.exit(0);
      }
      
      outputStreamSearch.println(Integer.toString(searchcount));
      outputStreamInsert.println(Integer.toString(insertcount));
      
      outputStreamSearch.close();
      outputStreamInsert.close();
   }// END OF printOpCounter 
    
}
